// <auto-generated />
using System;
using Hospital.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220628180412_Seed_DiagConsulPrescPagam")]
    partial class Seed_DiagConsulPrescPagam
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EspecialidadesMedicos", b =>
                {
                    b.Property<int>("ListaEspecialidadesId")
                        .HasColumnType("int");

                    b.Property<int>("ListaMedicosId")
                        .HasColumnType("int");

                    b.HasKey("ListaEspecialidadesId", "ListaMedicosId");

                    b.HasIndex("ListaMedicosId");

                    b.ToTable("EspecialidadesMedicos");

                    b.HasData(
                        new
                        {
                            ListaEspecialidadesId = 1,
                            ListaMedicosId = 1
                        },
                        new
                        {
                            ListaEspecialidadesId = 5,
                            ListaMedicosId = 1
                        },
                        new
                        {
                            ListaEspecialidadesId = 7,
                            ListaMedicosId = 1
                        },
                        new
                        {
                            ListaEspecialidadesId = 2,
                            ListaMedicosId = 2
                        },
                        new
                        {
                            ListaEspecialidadesId = 1,
                            ListaMedicosId = 3
                        },
                        new
                        {
                            ListaEspecialidadesId = 3,
                            ListaMedicosId = 4
                        },
                        new
                        {
                            ListaEspecialidadesId = 2,
                            ListaMedicosId = 5
                        },
                        new
                        {
                            ListaEspecialidadesId = 1,
                            ListaMedicosId = 6
                        },
                        new
                        {
                            ListaEspecialidadesId = 2,
                            ListaMedicosId = 6
                        },
                        new
                        {
                            ListaEspecialidadesId = 1,
                            ListaMedicosId = 7
                        },
                        new
                        {
                            ListaEspecialidadesId = 8,
                            ListaMedicosId = 1
                        });
                });

            modelBuilder.Entity("Hospital.Models.Consultas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiagnosticoFK")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicoFK")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<int>("UtenteFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticoFK");

                    b.HasIndex("MedicoFK");

                    b.HasIndex("UtenteFK");

                    b.ToTable("Consultas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = new DateTime(2022, 6, 19, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            DiagnosticoFK = 1,
                            Estado = "F",
                            MedicoFK = 1,
                            Motivo = "Dificuldade de Respiração",
                            UtenteFK = 1
                        },
                        new
                        {
                            Id = 2,
                            Data = new DateTime(2022, 6, 25, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DiagnosticoFK = 2,
                            Estado = "F",
                            MedicoFK = 2,
                            Motivo = "Recetemente tive dores no peito e senti-me Fadigado",
                            UtenteFK = 4
                        },
                        new
                        {
                            Id = 3,
                            Data = new DateTime(2022, 6, 26, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            DiagnosticoFK = 1,
                            Estado = "F",
                            MedicoFK = 1,
                            Motivo = "Check up após Consulta anterior relativa a Dificuldade de Respiração",
                            UtenteFK = 1
                        },
                        new
                        {
                            Id = 4,
                            Data = new DateTime(2022, 6, 26, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            DiagnosticoFK = 3,
                            Estado = "F",
                            MedicoFK = 2,
                            Motivo = "Febre Alta",
                            UtenteFK = 5
                        },
                        new
                        {
                            Id = 5,
                            Data = new DateTime(2022, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Estado = "F",
                            MedicoFK = 1,
                            Motivo = "Check up Anual",
                            UtenteFK = 4
                        },
                        new
                        {
                            Id = 6,
                            Data = new DateTime(2022, 7, 1, 17, 15, 0, 0, DateTimeKind.Unspecified),
                            Estado = "C",
                            MedicoFK = 1,
                            Motivo = "Check up Anual",
                            UtenteFK = 5
                        },
                        new
                        {
                            Id = 7,
                            Data = new DateTime(2022, 7, 29, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Estado = "M",
                            MedicoFK = 6,
                            Motivo = "Dores nos Pulsos",
                            UtenteFK = 3
                        },
                        new
                        {
                            Id = 8,
                            Data = new DateTime(2022, 7, 30, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Estado = "P",
                            MedicoFK = 2,
                            Motivo = "Check up Anual",
                            UtenteFK = 2
                        });
                });

            modelBuilder.Entity("Hospital.Models.Diagnosticos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Diagnosticos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "",
                            Estado = "C",
                            Titulo = "Asma Brônquica"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "",
                            Estado = "T",
                            Titulo = "Aterosclerose"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "",
                            Estado = "F",
                            Titulo = "Gripe"
                        });
                });

            modelBuilder.Entity("Hospital.Models.Especialidades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Clínica Geral"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Cardiologia"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Dermatologia"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Neurologia"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Psiquiatria"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Cirurgia Geral"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Pediatria"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Pneumologia"
                        });
                });

            modelBuilder.Entity("Hospital.Models.Medicos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NumCedulaProf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTelefone")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.ToTable("Medicos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataNascimento = new DateTime(1975, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cardoso@email.com",
                            Foto = "45485.png",
                            Nome = "Natália Cardoso",
                            NumCedulaProf = "45485",
                            NumTelefone = "931111111"
                        },
                        new
                        {
                            Id = 2,
                            DataNascimento = new DateTime(1971, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Luizpaz59181@email.com",
                            Foto = "semFoto.png",
                            Nome = "Luiz Fernando da Paz",
                            NumCedulaProf = "59181",
                            NumTelefone = "912222222"
                        },
                        new
                        {
                            Id = 3,
                            DataNascimento = new DateTime(1978, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Henriques82648@email.com",
                            Foto = "72648.png",
                            Nome = "João Henriques",
                            NumCedulaProf = "72648",
                            NumTelefone = "963333333"
                        },
                        new
                        {
                            Id = 4,
                            DataNascimento = new DateTime(1969, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MarceloFerreira@email.com",
                            Foto = "semFoto.png",
                            Nome = "Marcelo Ferreira",
                            NumCedulaProf = "40603",
                            NumTelefone = "964444444"
                        },
                        new
                        {
                            Id = 5,
                            DataNascimento = new DateTime(1975, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "GabHenriques@email.com",
                            Foto = "semFoto.png",
                            Nome = "Gabriel Henriques",
                            NumCedulaProf = "45485",
                            NumTelefone = "935555555"
                        },
                        new
                        {
                            Id = 6,
                            DataNascimento = new DateTime(1974, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Carvalho69791@email.com",
                            Foto = "semFoto.png",
                            Nome = "David Carvalho",
                            NumCedulaProf = "69791",
                            NumTelefone = "966666666"
                        },
                        new
                        {
                            Id = 7,
                            DataNascimento = new DateTime(1981, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Nogueira@email.com",
                            Foto = "semFoto.png",
                            Nome = "Carolina Nogueira",
                            NumCedulaProf = "82666",
                            NumTelefone = "937777777"
                        },
                        new
                        {
                            Id = 8,
                            DataNascimento = new DateTime(1976, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Fernando60603@email.com",
                            Foto = "60603.png",
                            Nome = "João Fernando",
                            NumCedulaProf = "60603",
                            NumTelefone = "918888888"
                        });
                });

            modelBuilder.Entity("Hospital.Models.Pagamentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConsultaFK")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataEfetuado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Metodo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UtentesId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaFK");

                    b.HasIndex("UtentesId");

                    b.ToTable("Pagamentos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultaFK = 1,
                            DataEfetuado = new DateTime(2022, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Taxa Moderadora",
                            Estado = true,
                            Metodo = "MB",
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 2,
                            ConsultaFK = 1,
                            DataEfetuado = new DateTime(2022, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Raio-X",
                            Estado = true,
                            Metodo = "MB",
                            Valor = 15m
                        },
                        new
                        {
                            Id = 3,
                            ConsultaFK = 2,
                            DataEfetuado = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Taxa Moderadora",
                            Estado = true,
                            Metodo = "D",
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 4,
                            ConsultaFK = 4,
                            DataEfetuado = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Exames Laboratoriais",
                            Estado = true,
                            Metodo = "D",
                            Valor = 35.62m
                        },
                        new
                        {
                            Id = 5,
                            ConsultaFK = 3,
                            Descricao = "Taxa Moderadora",
                            Estado = false,
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 6,
                            ConsultaFK = 3,
                            Descricao = "Taxa Moderadora",
                            Estado = false,
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 7,
                            ConsultaFK = 3,
                            Descricao = "Taxa Moderadora",
                            Estado = false,
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 8,
                            ConsultaFK = 3,
                            Descricao = "Taxa Moderadora",
                            Estado = false,
                            Valor = 12.5m
                        });
                });

            modelBuilder.Entity("Hospital.Models.Prescricoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DiagnosticoFK")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticoFK");

                    b.ToTable("Prescricoes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = new DateTime(2022, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Beclometasona quando for necessário, mínimo a cada 6 horas",
                            DiagnosticoFK = 1,
                            Estado = false
                        },
                        new
                        {
                            Id = 2,
                            Data = new DateTime(2022, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Estatinas à noite",
                            DiagnosticoFK = 2,
                            Estado = true
                        },
                        new
                        {
                            Id = 3,
                            Data = new DateTime(2022, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Formoterol duas vezes ao dia, de manhã e de noite",
                            DiagnosticoFK = 1,
                            Estado = true
                        });
                });

            modelBuilder.Entity("Hospital.Models.Utentes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIF")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NumTelemovel")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("NumUtente")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Utentes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataNascimento = new DateTime(1979, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "teixeira@email.com",
                            Foto = "semFoto.png",
                            NIF = "270131221",
                            Nome = "Isabela Bentes Teixeira",
                            NumTelemovel = "911111111",
                            NumUtente = "111111111",
                            Sexo = "F"
                        },
                        new
                        {
                            Id = 2,
                            DataNascimento = new DateTime(1988, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "leonardo@email.com",
                            Foto = "222222222.png",
                            NIF = "244340862",
                            Nome = "Leonardo Teves Dinis",
                            NumTelemovel = "932222222",
                            NumUtente = "222222222",
                            Sexo = "M"
                        },
                        new
                        {
                            Id = 3,
                            DataNascimento = new DateTime(1968, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "belaHenriques@email.com",
                            Foto = "333333333.png",
                            NIF = "290254388",
                            Nome = "Anabela Calçada Henriques Aveiro",
                            NumTelemovel = "933333333",
                            NumUtente = "333333333",
                            Sexo = "F"
                        },
                        new
                        {
                            Id = 4,
                            DataNascimento = new DateTime(1963, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joaocelso@email.com",
                            Foto = "semFoto.png",
                            NIF = "270131221",
                            Nome = "João Celso Oliveira",
                            NumTelemovel = "914444444",
                            NumUtente = "444444444",
                            Sexo = "M"
                        },
                        new
                        {
                            Id = 5,
                            DataNascimento = new DateTime(1990, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ineshenriques@email.com",
                            Foto = "555555555.png",
                            NIF = "270131221",
                            Nome = "Maria Inês Silva Henriques",
                            NumTelemovel = "915555555",
                            NumUtente = "555555555",
                            Sexo = "F"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EspecialidadesMedicos", b =>
                {
                    b.HasOne("Hospital.Models.Especialidades", null)
                        .WithMany()
                        .HasForeignKey("ListaEspecialidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Medicos", null)
                        .WithMany()
                        .HasForeignKey("ListaMedicosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Consultas", b =>
                {
                    b.HasOne("Hospital.Models.Diagnosticos", "Diagnostico")
                        .WithMany("ListaConsultas")
                        .HasForeignKey("DiagnosticoFK");

                    b.HasOne("Hospital.Models.Medicos", "Medico")
                        .WithMany("ListaConsultas")
                        .HasForeignKey("MedicoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Utentes", "Utente")
                        .WithMany("ListaConsultas")
                        .HasForeignKey("UtenteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");

                    b.Navigation("Medico");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Hospital.Models.Pagamentos", b =>
                {
                    b.HasOne("Hospital.Models.Consultas", "Consulta")
                        .WithMany()
                        .HasForeignKey("ConsultaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Utentes", null)
                        .WithMany("ListaPagamentos")
                        .HasForeignKey("UtentesId");

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("Hospital.Models.Prescricoes", b =>
                {
                    b.HasOne("Hospital.Models.Diagnosticos", "Diagnostico")
                        .WithMany("ListaPrescricao")
                        .HasForeignKey("DiagnosticoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Diagnosticos", b =>
                {
                    b.Navigation("ListaConsultas");

                    b.Navigation("ListaPrescricao");
                });

            modelBuilder.Entity("Hospital.Models.Medicos", b =>
                {
                    b.Navigation("ListaConsultas");
                });

            modelBuilder.Entity("Hospital.Models.Utentes", b =>
                {
                    b.Navigation("ListaConsultas");

                    b.Navigation("ListaPagamentos");
                });
#pragma warning restore 612, 618
        }
    }
}

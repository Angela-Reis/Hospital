// <auto-generated />
using System;
using Hospital.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220716133848_UtentesRemoverListaPagamentos")]
    partial class UtentesRemoverListaPagamentos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EspecialidadesMedicos", b =>
                {
                    b.Property<int>("ListaEspecialidadesId")
                        .HasColumnType("int");

                    b.Property<int>("ListaMedicosId")
                        .HasColumnType("int");

                    b.HasKey("ListaEspecialidadesId", "ListaMedicosId");

                    b.HasIndex("ListaMedicosId");

                    b.ToTable("EspecialidadesMedicos");

                    b.HasData(
                        new
                        {
                            ListaEspecialidadesId = 1,
                            ListaMedicosId = 1
                        },
                        new
                        {
                            ListaEspecialidadesId = 5,
                            ListaMedicosId = 1
                        },
                        new
                        {
                            ListaEspecialidadesId = 7,
                            ListaMedicosId = 1
                        },
                        new
                        {
                            ListaEspecialidadesId = 2,
                            ListaMedicosId = 2
                        },
                        new
                        {
                            ListaEspecialidadesId = 1,
                            ListaMedicosId = 3
                        },
                        new
                        {
                            ListaEspecialidadesId = 3,
                            ListaMedicosId = 4
                        },
                        new
                        {
                            ListaEspecialidadesId = 2,
                            ListaMedicosId = 5
                        },
                        new
                        {
                            ListaEspecialidadesId = 1,
                            ListaMedicosId = 6
                        },
                        new
                        {
                            ListaEspecialidadesId = 2,
                            ListaMedicosId = 6
                        },
                        new
                        {
                            ListaEspecialidadesId = 1,
                            ListaMedicosId = 7
                        },
                        new
                        {
                            ListaEspecialidadesId = 8,
                            ListaMedicosId = 1
                        });
                });

            modelBuilder.Entity("Hospital.Data.UtilizadorApp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a370779b-8777-4d3b-a96c-7a94d217e355",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a2ab385-9965-4182-8d20-878ee3b04f80",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 188, DateTimeKind.Local).AddTicks(904),
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Admin",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA6rhrlQYR9U6opih6MFIGoJ1SOsyNRecWs6ylmB4R051VusWK2UAhr+I6mOzW6T4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25acb752-7e79-4098-996d-b4dcac199892",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "93b9ebd2-3f4d-4009-8d8b-3a3404f85628",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28ed5877-7581-4220-a22f-e83c68653090",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 194, DateTimeKind.Local).AddTicks(3363),
                            Email = "admin2@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Admin2",
                            NormalizedEmail = "ADMIN2@ADMIN.COM",
                            NormalizedUserName = "ADMIN2@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOo/aNt6JMO6/32RRKK4ZNchczMZlxGEWbc3+V0OTa+qXD0OBys9kvUnATXMvfZTDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6fa3ac7-a67c-461e-9c37-e739efe418e3",
                            TwoFactorEnabled = false,
                            UserName = "admin2@admin.com"
                        },
                        new
                        {
                            Id = "388c89b7-046e-414a-8212-1cced6e1aea1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c956447-cbfb-4d28-8004-f04444b3e6f2",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 200, DateTimeKind.Local).AddTicks(5848),
                            Email = "cardoso@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Natália Cardoso",
                            NormalizedEmail = "CARDOSO@EMAIL.COM",
                            NormalizedUserName = "CARDOSO@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL1ZLX+MTQujv33Nc8soXBz0CymbHtToUy+svjXr1F0zPjUuRyZ9LlNvkIfudTGUKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79cd8603-6425-49af-857d-a18fb81f14e5",
                            TwoFactorEnabled = false,
                            UserName = "cardoso@email.com"
                        },
                        new
                        {
                            Id = "b092ad4f-06b8-427f-bc38-cab75e79fc7d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a061b29f-90ef-4011-8279-f6988ef3037e",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 206, DateTimeKind.Local).AddTicks(6880),
                            Email = "Luizpaz59181@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Luiz Fernando da Paz",
                            NormalizedEmail = "LUIZPAZ59181@EMAIL.COM",
                            NormalizedUserName = "LUIZPAZ59181@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFoLS1GcBPUt7H+Fajg7URC4P5EQUdRzoVOo1op1erBay27fvrIy1vct/xnJoNTD6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa3815c2-d05a-49ba-9d25-46d5cede085f",
                            TwoFactorEnabled = false,
                            UserName = "Luizpaz59181@email.com"
                        },
                        new
                        {
                            Id = "0c88c53b-f18e-494e-88ff-1e9c2360f310",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e000812b-e146-47b3-8fd5-da53b6966381",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 212, DateTimeKind.Local).AddTicks(8228),
                            Email = "Henriques82648@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "João Henriques",
                            NormalizedEmail = "HENRIQUES82648@EMAIL.COM",
                            NormalizedUserName = "JOÃO HENRIQUES",
                            PasswordHash = "AQAAAAEAACcQAAAAEKGW+Q84z2ediCqc+OcXuzxhZbNaK/jLzrOxJ1qVBElAAB5CbPnt7sRnJCinH7grCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbe40b83-2714-4ace-a93b-575cb5b87a9e",
                            TwoFactorEnabled = false,
                            UserName = "João Henriques"
                        },
                        new
                        {
                            Id = "2db0257a-446d-4886-b46e-3f6246610080",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4cdd7bf-2d6d-4715-9130-9ef023734ea2",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 218, DateTimeKind.Local).AddTicks(8809),
                            Email = "MarceloFerreira@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Marcelo Ferreira",
                            NormalizedEmail = "MARCELOFERREIRA@EMAIL.COM",
                            NormalizedUserName = "MARCELOFERREIRA@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDjeswkM3FjvnJmiDbsm06TID5AApyaOAFILQAX+vtcwl1veDPkjDsgVCpu866NYHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "545635e0-9fb8-4a4e-b963-dcc6cc5ce6ee",
                            TwoFactorEnabled = false,
                            UserName = "MarceloFerreira@email.com"
                        },
                        new
                        {
                            Id = "773922b7-74c3-4e4c-8097-fd7468ec8315",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e0326ec-47bc-4e52-9e32-c3dde44f0e42",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 225, DateTimeKind.Local).AddTicks(399),
                            Email = "GabHenriques@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Gabriel Henriques",
                            NormalizedEmail = "GABHENRIQUES@EMAIL.COM",
                            NormalizedUserName = "GABHENRIQUES@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKg1GEqTZm/IEvl/3gDEHRPHiVM8k8jK4jZ1HVdD+Z5qVpe0oVi0l8q3m754tgx0aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed0c2e0b-6725-47aa-8dfe-2d39be372b3b",
                            TwoFactorEnabled = false,
                            UserName = "GabHenriques@email.com"
                        },
                        new
                        {
                            Id = "db9792d7-d293-49b5-be8d-03ccf60d0e33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7eab589-b07c-4f66-8771-1f2a9be22965",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 231, DateTimeKind.Local).AddTicks(1136),
                            Email = "Carvalho69791@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "David Carvalho",
                            NormalizedEmail = "CARVALHO69791@EMAIL.COM",
                            NormalizedUserName = "CARVALHO69791@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECFQxPwlpotiNrF/SI+UjZCpgLu9zyzA1MRuEuSAVi9bqbpmkvGD8skdlNM/vMgRfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b7f2460-c550-480b-a8d6-5f8e6855f304",
                            TwoFactorEnabled = false,
                            UserName = "Carvalho69791@email.com"
                        },
                        new
                        {
                            Id = "e0585d26-607c-46d3-9eea-9c1c2708c7e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "971267bb-4a92-431d-a107-95a5d19c102d",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 237, DateTimeKind.Local).AddTicks(1297),
                            Email = "Nogueira@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Carolina Nogueira",
                            NormalizedEmail = "NOGUEIRA@EMAIL.COM",
                            NormalizedUserName = "NOGUEIRA@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO9rKniuDAJcUbSxuVAr+AMzCJxrNurufW9d9cvIn5pXYlkSBea8SK7TmGrFL8kVbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d45171a-6545-4f4e-8629-c42b2624a375",
                            TwoFactorEnabled = false,
                            UserName = "Nogueira@email.com"
                        },
                        new
                        {
                            Id = "10450067-5f19-44c7-8be1-388e8a6bdb30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2913e9e5-286a-4b1e-b247-45b256c0a4bb",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 243, DateTimeKind.Local).AddTicks(2158),
                            Email = "Fernando60603@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "João Fernando",
                            NormalizedEmail = "FERNANDO60603@EMAIL.COM",
                            NormalizedUserName = "FERNANDO60603@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEBQB5RttO44HwMuIxkAUBUZL1W9/TBi0Kwgkf7Nn2G5KGr/lWzseVV1Gmy/ffU1RQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "532a3f1b-a4a2-443f-abc7-325bcab79c88",
                            TwoFactorEnabled = false,
                            UserName = "Fernando60603@email.com"
                        },
                        new
                        {
                            Id = "29f5f36e-5f11-42a2-b0b8-de7741c7de16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "628356ca-07c3-4ba0-820c-b334d87a9f82",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 249, DateTimeKind.Local).AddTicks(2513),
                            Email = "teixeira@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Isabela Bentes Teixeira",
                            NormalizedEmail = "TEIXEIRA@EMAIL.COM",
                            NormalizedUserName = "TEIXEIRA@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKOuDHdDS0pu2WC3DkmFoaJ2mnoopoYPDbQuS7SO45DeWvWioynWArpmQsE3eCHVmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "226e0f0b-c9d8-4d5e-870f-bb6451c0ac36",
                            TwoFactorEnabled = false,
                            UserName = "teixeira@email.com"
                        },
                        new
                        {
                            Id = "a91d6e50-ec7a-442d-9278-4567dc61a0aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d11b22f-d01a-40fe-a500-a664bb6affa9",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 255, DateTimeKind.Local).AddTicks(3221),
                            Email = "leonardo@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Leonardo Teves Dinis",
                            NormalizedEmail = "LEONARDO@EMAIL.COM",
                            NormalizedUserName = "LEONARDO@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN0g0S1ZJQLQ0Opa6ZMlKJ0uvFLMwS1J4YQxuDBJWYQDCT58eGk7qecijU+4IRme0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3581d65-fc0b-43c3-b727-318c0cdbb01b",
                            TwoFactorEnabled = false,
                            UserName = "leonardo@email.com"
                        },
                        new
                        {
                            Id = "18d7e29d-408f-42d7-9a27-ecc5d034d157",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c576d2d-91ad-4e4a-ae57-d06d96d8c75c",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 261, DateTimeKind.Local).AddTicks(4506),
                            Email = "belaHenriques@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Anabela Calçada Henriques Aveiro",
                            NormalizedEmail = "BELAHENRIQUES@EMAIL.COM",
                            NormalizedUserName = "BELAHENRIQUES@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHcjHOgqeLLPay90wFMrPl/mRN09hmiGnAjg8I+0BkKu1xFfRbrmd3AaS6VZw4YpRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82bd8315-a15a-4178-8f5b-0c0cfab12ddf",
                            TwoFactorEnabled = false,
                            UserName = "belaHenriques@email.com"
                        },
                        new
                        {
                            Id = "5db04ccb-3be8-452f-b381-47bd2277fdca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36ef9803-0074-4a90-94a5-f8ee3a8ce4a6",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 267, DateTimeKind.Local).AddTicks(4671),
                            Email = "joaocelso@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "João Celso Oliveira",
                            NormalizedEmail = "JOAOCELSO@EMAIL.COM",
                            NormalizedUserName = "JOAOCELSO@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPH+QvtABRMyHXcQjKy8n8G/DpFtU4hYfkJON9yT0+c6v+LyAXw4nFobFq6izXxhmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5a8e581-583d-4f9e-b5d4-0927d845d09d",
                            TwoFactorEnabled = false,
                            UserName = "joaocelso@email.com"
                        },
                        new
                        {
                            Id = "db43e582-e359-421d-9192-1d3ad1a57737",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86366f36-73a9-41d3-ac88-9cd26e681d9d",
                            DataRegistro = new DateTime(2022, 7, 16, 14, 38, 48, 273, DateTimeKind.Local).AddTicks(5591),
                            Email = "ineshenriques@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Maria Inês Silva Henriques",
                            NormalizedEmail = "INESHENRIQUES@EMAIL.COM",
                            NormalizedUserName = "INESHENRIQUES@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELcvr1+krrk+PHfwpPNaguTslYhjLFazTT10lIIjYcXqCT/1BXS/lNXa7wAAE5h/Rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43367474-9e8a-481c-b189-2e3a87d79924",
                            TwoFactorEnabled = false,
                            UserName = "ineshenriques@email.com"
                        });
                });

            modelBuilder.Entity("Hospital.Models.Consultas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiagnosticoFK")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicoFK")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<int>("UtenteFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticoFK");

                    b.HasIndex("MedicoFK");

                    b.HasIndex("UtenteFK");

                    b.ToTable("Consultas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = new DateTime(2022, 6, 19, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            DiagnosticoFK = 1,
                            Estado = "F",
                            MedicoFK = 1,
                            Motivo = "Dificuldade de Respiração",
                            UtenteFK = 1
                        },
                        new
                        {
                            Id = 2,
                            Data = new DateTime(2022, 6, 25, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DiagnosticoFK = 2,
                            Estado = "F",
                            MedicoFK = 2,
                            Motivo = "Recetemente tive dores no peito e senti-me Fadigado",
                            UtenteFK = 4
                        },
                        new
                        {
                            Id = 3,
                            Data = new DateTime(2022, 6, 26, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            DiagnosticoFK = 1,
                            Estado = "F",
                            MedicoFK = 1,
                            Motivo = "Check up após Consulta anterior relativa a Dificuldade de Respiração",
                            UtenteFK = 1
                        },
                        new
                        {
                            Id = 4,
                            Data = new DateTime(2022, 6, 26, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            DiagnosticoFK = 3,
                            Estado = "F",
                            MedicoFK = 2,
                            Motivo = "Febre Alta",
                            UtenteFK = 5
                        },
                        new
                        {
                            Id = 5,
                            Data = new DateTime(2022, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Estado = "F",
                            MedicoFK = 1,
                            Motivo = "Check up Anual",
                            UtenteFK = 4
                        },
                        new
                        {
                            Id = 6,
                            Data = new DateTime(2022, 7, 1, 17, 15, 0, 0, DateTimeKind.Unspecified),
                            Estado = "C",
                            MedicoFK = 1,
                            Motivo = "Check up Anual",
                            UtenteFK = 5
                        },
                        new
                        {
                            Id = 7,
                            Data = new DateTime(2022, 7, 29, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Estado = "M",
                            MedicoFK = 6,
                            Motivo = "Dores nos Pulsos",
                            UtenteFK = 3
                        },
                        new
                        {
                            Id = 8,
                            Data = new DateTime(2022, 7, 30, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Estado = "P",
                            MedicoFK = 2,
                            Motivo = "Check up Anual",
                            UtenteFK = 2
                        });
                });

            modelBuilder.Entity("Hospital.Models.Diagnosticos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Diagnosticos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "",
                            Estado = "C",
                            Titulo = "Asma Brônquica"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "",
                            Estado = "T",
                            Titulo = "Aterosclerose"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "",
                            Estado = "F",
                            Titulo = "Gripe"
                        });
                });

            modelBuilder.Entity("Hospital.Models.Especialidades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Clínica Geral"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Cardiologia"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Dermatologia"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Neurologia"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Psiquiatria"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Cirurgia Geral"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Pediatria"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Pneumologia"
                        });
                });

            modelBuilder.Entity("Hospital.Models.Medicos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUtilizador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NumCedulaProf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTelefone")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.ToTable("Medicos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataNascimento = new DateTime(1975, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cardoso@email.com",
                            Foto = "45485.png",
                            IdUtilizador = "388c89b7-046e-414a-8212-1cced6e1aea1",
                            Nome = "Natália Cardoso",
                            NumCedulaProf = "45485",
                            NumTelefone = "931111111"
                        },
                        new
                        {
                            Id = 2,
                            DataNascimento = new DateTime(1971, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Luizpaz59181@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "b092ad4f-06b8-427f-bc38-cab75e79fc7d",
                            Nome = "Luiz Fernando da Paz",
                            NumCedulaProf = "59181",
                            NumTelefone = "912222222"
                        },
                        new
                        {
                            Id = 3,
                            DataNascimento = new DateTime(1978, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Henriques82648@email.com",
                            Foto = "72648.png",
                            IdUtilizador = "0c88c53b-f18e-494e-88ff-1e9c2360f310",
                            Nome = "João Henriques",
                            NumCedulaProf = "72648",
                            NumTelefone = "963333333"
                        },
                        new
                        {
                            Id = 4,
                            DataNascimento = new DateTime(1969, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MarceloFerreira@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "2db0257a-446d-4886-b46e-3f6246610080",
                            Nome = "Marcelo Ferreira",
                            NumCedulaProf = "40603",
                            NumTelefone = "964444444"
                        },
                        new
                        {
                            Id = 5,
                            DataNascimento = new DateTime(1975, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "GabHenriques@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "773922b7-74c3-4e4c-8097-fd7468ec8315",
                            Nome = "Gabriel Henriques",
                            NumCedulaProf = "45485",
                            NumTelefone = "935555555"
                        },
                        new
                        {
                            Id = 6,
                            DataNascimento = new DateTime(1974, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Carvalho69791@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "db9792d7-d293-49b5-be8d-03ccf60d0e33",
                            Nome = "David Carvalho",
                            NumCedulaProf = "69791",
                            NumTelefone = "966666666"
                        },
                        new
                        {
                            Id = 7,
                            DataNascimento = new DateTime(1981, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Nogueira@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "e0585d26-607c-46d3-9eea-9c1c2708c7e1",
                            Nome = "Carolina Nogueira",
                            NumCedulaProf = "82666",
                            NumTelefone = "937777777"
                        },
                        new
                        {
                            Id = 8,
                            DataNascimento = new DateTime(1976, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Fernando60603@email.com",
                            Foto = "60603.png",
                            IdUtilizador = "10450067-5f19-44c7-8be1-388e8a6bdb30",
                            Nome = "João Fernando",
                            NumCedulaProf = "60603",
                            NumTelefone = "918888888"
                        });
                });

            modelBuilder.Entity("Hospital.Models.Pagamentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConsultaFK")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataEfetuado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Metodo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaFK");

                    b.ToTable("Pagamentos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultaFK = 1,
                            DataEfetuado = new DateTime(2022, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Taxa Moderadora",
                            Estado = true,
                            Metodo = "MB",
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 2,
                            ConsultaFK = 1,
                            DataEfetuado = new DateTime(2022, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Raio-X",
                            Estado = true,
                            Metodo = "MB",
                            Valor = 15m
                        },
                        new
                        {
                            Id = 3,
                            ConsultaFK = 2,
                            DataEfetuado = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Taxa Moderadora",
                            Estado = true,
                            Metodo = "D",
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 4,
                            ConsultaFK = 4,
                            DataEfetuado = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Exames Laboratoriais",
                            Estado = true,
                            Metodo = "D",
                            Valor = 35.62m
                        },
                        new
                        {
                            Id = 5,
                            ConsultaFK = 3,
                            Descricao = "Taxa Moderadora",
                            Estado = false,
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 6,
                            ConsultaFK = 4,
                            Descricao = "Taxa Moderadora",
                            Estado = false,
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 7,
                            ConsultaFK = 5,
                            Descricao = "Taxa Moderadora",
                            Estado = false,
                            Valor = 12.5m
                        });
                });

            modelBuilder.Entity("Hospital.Models.Prescricoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DiagnosticoFK")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticoFK");

                    b.ToTable("Prescricoes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = new DateTime(2022, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Beclometasona quando for necessário, mínimo a cada 6 horas",
                            DiagnosticoFK = 1,
                            Estado = false
                        },
                        new
                        {
                            Id = 2,
                            Data = new DateTime(2022, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Estatinas à noite",
                            DiagnosticoFK = 2,
                            Estado = true
                        },
                        new
                        {
                            Id = 3,
                            Data = new DateTime(2022, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Formoterol duas vezes ao dia, de manhã e de noite",
                            DiagnosticoFK = 1,
                            Estado = true
                        });
                });

            modelBuilder.Entity("Hospital.Models.Utentes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUtilizador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIF")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NumTelemovel")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("NumUtente")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Utentes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataNascimento = new DateTime(1979, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "teixeira@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "29f5f36e-5f11-42a2-b0b8-de7741c7de16",
                            NIF = "270131221",
                            Nome = "Isabela Bentes Teixeira",
                            NumTelemovel = "911111111",
                            NumUtente = "111111111",
                            Sexo = "F"
                        },
                        new
                        {
                            Id = 2,
                            DataNascimento = new DateTime(1988, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "leonardo@email.com",
                            Foto = "222222222.png",
                            IdUtilizador = "a91d6e50-ec7a-442d-9278-4567dc61a0aa",
                            NIF = "244340862",
                            Nome = "Leonardo Teves Dinis",
                            NumTelemovel = "932222222",
                            NumUtente = "222222222",
                            Sexo = "M"
                        },
                        new
                        {
                            Id = 3,
                            DataNascimento = new DateTime(1968, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "belaHenriques@email.com",
                            Foto = "333333333.png",
                            IdUtilizador = "18d7e29d-408f-42d7-9a27-ecc5d034d157",
                            NIF = "290254388",
                            Nome = "Anabela Calçada Henriques Aveiro",
                            NumTelemovel = "933333333",
                            NumUtente = "333333333",
                            Sexo = "F"
                        },
                        new
                        {
                            Id = 4,
                            DataNascimento = new DateTime(1963, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joaocelso@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "5db04ccb-3be8-452f-b381-47bd2277fdca",
                            NIF = "270131221",
                            Nome = "João Celso Oliveira",
                            NumTelemovel = "914444444",
                            NumUtente = "444444444",
                            Sexo = "M"
                        },
                        new
                        {
                            Id = 5,
                            DataNascimento = new DateTime(1990, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ineshenriques@email.com",
                            Foto = "555555555.png",
                            IdUtilizador = "db43e582-e359-421d-9192-1d3ad1a57737",
                            NIF = "270131221",
                            Nome = "Maria Inês Silva Henriques",
                            NumTelemovel = "915555555",
                            NumUtente = "555555555",
                            Sexo = "F"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a",
                            ConcurrencyStamp = "f3bb8cca-9693-4838-9248-e496b8f29d30",
                            Name = "Administrativo",
                            NormalizedName = "ADMINISTRATIVO"
                        },
                        new
                        {
                            Id = "m",
                            ConcurrencyStamp = "e4d347ad-d73b-487d-a7f5-0bb3eb545ee8",
                            Name = "Medico",
                            NormalizedName = "MEDICO"
                        },
                        new
                        {
                            Id = "u",
                            ConcurrencyStamp = "7c4603b6-6040-4a26-b6a6-3a121352f1ce",
                            Name = "Utente",
                            NormalizedName = "UTENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a370779b-8777-4d3b-a96c-7a94d217e355",
                            RoleId = "a"
                        },
                        new
                        {
                            UserId = "93b9ebd2-3f4d-4009-8d8b-3a3404f85628",
                            RoleId = "a"
                        },
                        new
                        {
                            UserId = "388c89b7-046e-414a-8212-1cced6e1aea1",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "b092ad4f-06b8-427f-bc38-cab75e79fc7d",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "0c88c53b-f18e-494e-88ff-1e9c2360f310",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "2db0257a-446d-4886-b46e-3f6246610080",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "773922b7-74c3-4e4c-8097-fd7468ec8315",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "db9792d7-d293-49b5-be8d-03ccf60d0e33",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "e0585d26-607c-46d3-9eea-9c1c2708c7e1",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "10450067-5f19-44c7-8be1-388e8a6bdb30",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "29f5f36e-5f11-42a2-b0b8-de7741c7de16",
                            RoleId = "u"
                        },
                        new
                        {
                            UserId = "a91d6e50-ec7a-442d-9278-4567dc61a0aa",
                            RoleId = "u"
                        },
                        new
                        {
                            UserId = "18d7e29d-408f-42d7-9a27-ecc5d034d157",
                            RoleId = "u"
                        },
                        new
                        {
                            UserId = "5db04ccb-3be8-452f-b381-47bd2277fdca",
                            RoleId = "u"
                        },
                        new
                        {
                            UserId = "db43e582-e359-421d-9192-1d3ad1a57737",
                            RoleId = "u"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EspecialidadesMedicos", b =>
                {
                    b.HasOne("Hospital.Models.Especialidades", null)
                        .WithMany()
                        .HasForeignKey("ListaEspecialidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Medicos", null)
                        .WithMany()
                        .HasForeignKey("ListaMedicosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Consultas", b =>
                {
                    b.HasOne("Hospital.Models.Diagnosticos", "Diagnostico")
                        .WithMany("ListaConsultas")
                        .HasForeignKey("DiagnosticoFK");

                    b.HasOne("Hospital.Models.Medicos", "Medico")
                        .WithMany("ListaConsultas")
                        .HasForeignKey("MedicoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Utentes", "Utente")
                        .WithMany("ListaConsultas")
                        .HasForeignKey("UtenteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");

                    b.Navigation("Medico");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Hospital.Models.Pagamentos", b =>
                {
                    b.HasOne("Hospital.Models.Consultas", "Consulta")
                        .WithMany()
                        .HasForeignKey("ConsultaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("Hospital.Models.Prescricoes", b =>
                {
                    b.HasOne("Hospital.Models.Diagnosticos", "Diagnostico")
                        .WithMany("ListaPrescricao")
                        .HasForeignKey("DiagnosticoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hospital.Data.UtilizadorApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hospital.Data.UtilizadorApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.UtilizadorApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hospital.Data.UtilizadorApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Diagnosticos", b =>
                {
                    b.Navigation("ListaConsultas");

                    b.Navigation("ListaPrescricao");
                });

            modelBuilder.Entity("Hospital.Models.Medicos", b =>
                {
                    b.Navigation("ListaConsultas");
                });

            modelBuilder.Entity("Hospital.Models.Utentes", b =>
                {
                    b.Navigation("ListaConsultas");
                });
#pragma warning restore 612, 618
        }
    }
}

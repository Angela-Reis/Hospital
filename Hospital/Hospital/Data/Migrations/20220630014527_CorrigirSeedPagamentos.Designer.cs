// <auto-generated />
using System;
using Hospital.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220630014527_CorrigirSeedPagamentos")]
    partial class CorrigirSeedPagamentos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EspecialidadesMedicos", b =>
                {
                    b.Property<int>("ListaEspecialidadesId")
                        .HasColumnType("int");

                    b.Property<int>("ListaMedicosId")
                        .HasColumnType("int");

                    b.HasKey("ListaEspecialidadesId", "ListaMedicosId");

                    b.HasIndex("ListaMedicosId");

                    b.ToTable("EspecialidadesMedicos");

                    b.HasData(
                        new
                        {
                            ListaEspecialidadesId = 1,
                            ListaMedicosId = 1
                        },
                        new
                        {
                            ListaEspecialidadesId = 5,
                            ListaMedicosId = 1
                        },
                        new
                        {
                            ListaEspecialidadesId = 7,
                            ListaMedicosId = 1
                        },
                        new
                        {
                            ListaEspecialidadesId = 2,
                            ListaMedicosId = 2
                        },
                        new
                        {
                            ListaEspecialidadesId = 1,
                            ListaMedicosId = 3
                        },
                        new
                        {
                            ListaEspecialidadesId = 3,
                            ListaMedicosId = 4
                        },
                        new
                        {
                            ListaEspecialidadesId = 2,
                            ListaMedicosId = 5
                        },
                        new
                        {
                            ListaEspecialidadesId = 1,
                            ListaMedicosId = 6
                        },
                        new
                        {
                            ListaEspecialidadesId = 2,
                            ListaMedicosId = 6
                        },
                        new
                        {
                            ListaEspecialidadesId = 1,
                            ListaMedicosId = 7
                        },
                        new
                        {
                            ListaEspecialidadesId = 8,
                            ListaMedicosId = 1
                        });
                });

            modelBuilder.Entity("Hospital.Data.UtilizadorApp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a370779b-8777-4d3b-a96c-7a94d217e355",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d39f2cbd-c41e-4562-8d7d-e994ca7d6796",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 746, DateTimeKind.Local).AddTicks(7716),
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Admin",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENp1uesPUB4rAKGczpz+adUOnKa6gSRng18qu6NBOn3viV3kXMZRvjej2KeXmGs09A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "816ca4b3-30e8-4781-9269-a8e0abe148c0",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "93b9ebd2-3f4d-4009-8d8b-3a3404f85628",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc2b3302-0865-41ce-bf0b-52233b79be4b",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 753, DateTimeKind.Local).AddTicks(1220),
                            Email = "admin2@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Admin2",
                            NormalizedEmail = "ADMIN2@ADMIN.COM",
                            NormalizedUserName = "ADMIN2@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK/M/EauVL6IpjHe6ZfzxOKWVjIdbcgjm0cN/bjRFVrkyU1fCOGmrWmqGNP8vG3U+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd2ddfa3-ace8-4a85-ada5-d9b6ad27678d",
                            TwoFactorEnabled = false,
                            UserName = "admin2@admin.com"
                        },
                        new
                        {
                            Id = "388c89b7-046e-414a-8212-1cced6e1aea1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9314f68-98fd-4aea-8761-8df204a5abb7",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 762, DateTimeKind.Local).AddTicks(6259),
                            Email = "cardoso@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Natália Cardoso",
                            NormalizedEmail = "CARDOSO@EMAIL.COM",
                            NormalizedUserName = "CARDOSO@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIz+mDs99QFsivpgZvktT7WjSnWeNL2TM/LXMGtGXnU+MKKcClP+jTeNrckVB/oiFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35f078ba-ae01-40f5-a92a-42a9a84e24d5",
                            TwoFactorEnabled = false,
                            UserName = "cardoso@email.com"
                        },
                        new
                        {
                            Id = "b092ad4f-06b8-427f-bc38-cab75e79fc7d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e12e56f-3db5-4053-b8d1-bb332a0f8136",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 772, DateTimeKind.Local).AddTicks(4133),
                            Email = "Luizpaz59181@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Luiz Fernando da Paz",
                            NormalizedEmail = "LUIZPAZ59181@EMAIL.COM",
                            NormalizedUserName = "LUIZPAZ59181@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG1OP1T2fk1pzcSxYK7vwpXjJhYZPjSASfDCJoDnFUoOAP3ngF6hBRcJd64nwTwjNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1329bff-1a97-4924-931e-8c14db539c8c",
                            TwoFactorEnabled = false,
                            UserName = "Luizpaz59181@email.com"
                        },
                        new
                        {
                            Id = "0c88c53b-f18e-494e-88ff-1e9c2360f310",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f3d5ebf-0800-4dd5-98ee-909fde2f2590",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 779, DateTimeKind.Local).AddTicks(1488),
                            Email = "Henriques82648@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "João Henriques",
                            NormalizedEmail = "HENRIQUES82648@EMAIL.COM",
                            NormalizedUserName = "JOÃO HENRIQUES",
                            PasswordHash = "AQAAAAEAACcQAAAAEP04JMC4WlUz+wrJgadbdv8lvKHX3PLJRyPoGKO4XU459S7vmMqr3wkYk13KC0VsPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2e8a113-072d-4212-875c-697127c09282",
                            TwoFactorEnabled = false,
                            UserName = "João Henriques"
                        },
                        new
                        {
                            Id = "2db0257a-446d-4886-b46e-3f6246610080",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f7549f7-0643-4770-befa-9dd64dc12c66",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 785, DateTimeKind.Local).AddTicks(5293),
                            Email = "MarceloFerreira@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Marcelo Ferreira",
                            NormalizedEmail = "MARCELOFERREIRA@EMAIL.COM",
                            NormalizedUserName = "MARCELOFERREIRA@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMyn6Y/j8p4HTpugjIbF5XKjAHvDS6bZ15Vk5PZHpN1sF6CoyRufw3lWFDSoAcQ52A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6eb88de-317e-4def-85be-40ae7b767b1d",
                            TwoFactorEnabled = false,
                            UserName = "MarceloFerreira@email.com"
                        },
                        new
                        {
                            Id = "773922b7-74c3-4e4c-8097-fd7468ec8315",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfcda908-cf7a-457a-a339-1d26f8bf1bb7",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 803, DateTimeKind.Local).AddTicks(7940),
                            Email = "GabHenriques@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Gabriel Henriques",
                            NormalizedEmail = "GABHENRIQUES@EMAIL.COM",
                            NormalizedUserName = "GABHENRIQUES@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC05yaK0rWmG66Fu+Ctv+hT1PnUw82nHy7n7LwJEEylxJ2UY787vKqojjk/yVEySvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "358bc881-e375-4d62-b044-f0c9e9cabd95",
                            TwoFactorEnabled = false,
                            UserName = "GabHenriques@email.com"
                        },
                        new
                        {
                            Id = "db9792d7-d293-49b5-be8d-03ccf60d0e33",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65011658-d556-4e94-b7cf-5111c58c88a2",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 813, DateTimeKind.Local).AddTicks(9545),
                            Email = "Carvalho69791@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "David Carvalho",
                            NormalizedEmail = "CARVALHO69791@EMAIL.COM",
                            NormalizedUserName = "CARVALHO69791@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAXLwlBs6+K8H8hzQsTvxeDrCBDvPE2IfDQyGs21NFG7Zv4t3jre6TBYZYTVnw2CQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "adfc906a-d6c1-456b-96e8-401b08846798",
                            TwoFactorEnabled = false,
                            UserName = "Carvalho69791@email.com"
                        },
                        new
                        {
                            Id = "e0585d26-607c-46d3-9eea-9c1c2708c7e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdbfec02-6d70-4225-a956-0a712f603e4d",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 820, DateTimeKind.Local).AddTicks(7059),
                            Email = "Nogueira@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Carolina Nogueira",
                            NormalizedEmail = "NOGUEIRA@EMAIL.COM",
                            NormalizedUserName = "NOGUEIRA@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEpFWvqR8NMLBIqdHj6+7jHlUsMUVUNwDBTla/Oh4Cd++uD7WhSMtwSjgSn82prxIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e945c7b-ee3d-43d1-8c27-0e95c7e4bb71",
                            TwoFactorEnabled = false,
                            UserName = "Nogueira@email.com"
                        },
                        new
                        {
                            Id = "10450067-5f19-44c7-8be1-388e8a6bdb30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2517871-7ea0-4798-a4c1-4e7bdcfcd6b1",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 826, DateTimeKind.Local).AddTicks(9584),
                            Email = "Fernando60603@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "João Fernando",
                            NormalizedEmail = "FERNANDO60603@EMAIL.COM",
                            NormalizedUserName = "FERNANDO60603@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELOLNQrMkAP2HMHLYDuU9IcoOYisT8dFFyR/7C5JxrthdJ97b9ylEyqZ0uF6aropiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fdc9b67-3e18-4a58-9fcb-7151a5a11dcf",
                            TwoFactorEnabled = false,
                            UserName = "Fernando60603@email.com"
                        },
                        new
                        {
                            Id = "29f5f36e-5f11-42a2-b0b8-de7741c7de16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7369becd-67cc-4f21-ae5f-d070290dca3d",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 833, DateTimeKind.Local).AddTicks(1435),
                            Email = "teixeira@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Isabela Bentes Teixeira",
                            NormalizedEmail = "TEIXEIRA@EMAIL.COM",
                            NormalizedUserName = "TEIXEIRA@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHSCgNsXCj2EhlSaSju0NCduk5bhjyRSezYDf02poNrTag1NxGbV/KUtjUFeeAr+dQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45d1e180-7f89-4710-9133-3da848c379ca",
                            TwoFactorEnabled = false,
                            UserName = "teixeira@email.com"
                        },
                        new
                        {
                            Id = "a91d6e50-ec7a-442d-9278-4567dc61a0aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad39384c-231c-41ab-9c24-c4bb2119387e",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 839, DateTimeKind.Local).AddTicks(3915),
                            Email = "leonardo@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Leonardo Teves Dinis",
                            NormalizedEmail = "LEONARDO@EMAIL.COM",
                            NormalizedUserName = "LEONARDO@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMch2cm+yOSBLZr+7IR0NURDEt4z3+SYMntgpO846Ih84e0YM3VaD+qvIsEtAPk19A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39b6e71b-adc5-467b-97ca-fe826e55f8fd",
                            TwoFactorEnabled = false,
                            UserName = "leonardo@email.com"
                        },
                        new
                        {
                            Id = "18d7e29d-408f-42d7-9a27-ecc5d034d157",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f1ae2c4-5211-4841-b82b-b3dac0dd1a70",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 845, DateTimeKind.Local).AddTicks(5561),
                            Email = "belaHenriques@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Anabela Calçada Henriques Aveiro",
                            NormalizedEmail = "BELAHENRIQUES@EMAIL.COM",
                            NormalizedUserName = "BELAHENRIQUES@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENR+NxnJzp4aqoHQsNwy0GQ7HA0V5Of9Z8YjPALUmhw7nAfJaW9f8BF6Vu9qibtlhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fc08e1d-c97a-451a-9714-46c4d96c1fbe",
                            TwoFactorEnabled = false,
                            UserName = "belaHenriques@email.com"
                        },
                        new
                        {
                            Id = "5db04ccb-3be8-452f-b381-47bd2277fdca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29475fec-a232-4cc7-a852-b609f69a9236",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 851, DateTimeKind.Local).AddTicks(8673),
                            Email = "joaocelso@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "João Celso Oliveira",
                            NormalizedEmail = "JOAOCELSO@EMAIL.COM",
                            NormalizedUserName = "JOAOCELSO@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECV8BxcUm8fWwAK8RXXWu2vzNWzxDW58+RROj+ryPT1hHsQJAIzpf8WGj+7DbqRtNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6eb2ca61-0b94-4138-beab-49e2cc3e6907",
                            TwoFactorEnabled = false,
                            UserName = "joaocelso@email.com"
                        },
                        new
                        {
                            Id = "db43e582-e359-421d-9192-1d3ad1a57737",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b486048-3e0a-42ed-88c5-eeb2a238f865",
                            DataRegistro = new DateTime(2022, 6, 30, 2, 45, 26, 858, DateTimeKind.Local).AddTicks(1568),
                            Email = "ineshenriques@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Nome = "Maria Inês Silva Henriques",
                            NormalizedEmail = "INESHENRIQUES@EMAIL.COM",
                            NormalizedUserName = "INESHENRIQUES@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH02JpNcQwgXaB7x0ak8z38mrWk4bD2nRMBJVw8xZdpPm5hrxKiGRA3E8JMqxGgYpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1dea7450-f9e1-41a1-b2b4-928f223b4d41",
                            TwoFactorEnabled = false,
                            UserName = "ineshenriques@email.com"
                        });
                });

            modelBuilder.Entity("Hospital.Models.Consultas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiagnosticoFK")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicoFK")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<int>("UtenteFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticoFK");

                    b.HasIndex("MedicoFK");

                    b.HasIndex("UtenteFK");

                    b.ToTable("Consultas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = new DateTime(2022, 6, 19, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            DiagnosticoFK = 1,
                            Estado = "F",
                            MedicoFK = 1,
                            Motivo = "Dificuldade de Respiração",
                            UtenteFK = 1
                        },
                        new
                        {
                            Id = 2,
                            Data = new DateTime(2022, 6, 25, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DiagnosticoFK = 2,
                            Estado = "F",
                            MedicoFK = 2,
                            Motivo = "Recetemente tive dores no peito e senti-me Fadigado",
                            UtenteFK = 4
                        },
                        new
                        {
                            Id = 3,
                            Data = new DateTime(2022, 6, 26, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            DiagnosticoFK = 1,
                            Estado = "F",
                            MedicoFK = 1,
                            Motivo = "Check up após Consulta anterior relativa a Dificuldade de Respiração",
                            UtenteFK = 1
                        },
                        new
                        {
                            Id = 4,
                            Data = new DateTime(2022, 6, 26, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            DiagnosticoFK = 3,
                            Estado = "F",
                            MedicoFK = 2,
                            Motivo = "Febre Alta",
                            UtenteFK = 5
                        },
                        new
                        {
                            Id = 5,
                            Data = new DateTime(2022, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Estado = "F",
                            MedicoFK = 1,
                            Motivo = "Check up Anual",
                            UtenteFK = 4
                        },
                        new
                        {
                            Id = 6,
                            Data = new DateTime(2022, 7, 1, 17, 15, 0, 0, DateTimeKind.Unspecified),
                            Estado = "C",
                            MedicoFK = 1,
                            Motivo = "Check up Anual",
                            UtenteFK = 5
                        },
                        new
                        {
                            Id = 7,
                            Data = new DateTime(2022, 7, 29, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Estado = "M",
                            MedicoFK = 6,
                            Motivo = "Dores nos Pulsos",
                            UtenteFK = 3
                        },
                        new
                        {
                            Id = 8,
                            Data = new DateTime(2022, 7, 30, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Estado = "P",
                            MedicoFK = 2,
                            Motivo = "Check up Anual",
                            UtenteFK = 2
                        });
                });

            modelBuilder.Entity("Hospital.Models.Diagnosticos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Diagnosticos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "",
                            Estado = "C",
                            Titulo = "Asma Brônquica"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "",
                            Estado = "T",
                            Titulo = "Aterosclerose"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "",
                            Estado = "F",
                            Titulo = "Gripe"
                        });
                });

            modelBuilder.Entity("Hospital.Models.Especialidades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Clínica Geral"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Cardiologia"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Dermatologia"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Neurologia"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Psiquiatria"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Cirurgia Geral"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Pediatria"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Pneumologia"
                        });
                });

            modelBuilder.Entity("Hospital.Models.Medicos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUtilizador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NumCedulaProf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumTelefone")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.ToTable("Medicos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataNascimento = new DateTime(1975, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cardoso@email.com",
                            Foto = "45485.png",
                            IdUtilizador = "388c89b7-046e-414a-8212-1cced6e1aea1",
                            Nome = "Natália Cardoso",
                            NumCedulaProf = "45485",
                            NumTelefone = "931111111"
                        },
                        new
                        {
                            Id = 2,
                            DataNascimento = new DateTime(1971, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Luizpaz59181@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "b092ad4f-06b8-427f-bc38-cab75e79fc7d",
                            Nome = "Luiz Fernando da Paz",
                            NumCedulaProf = "59181",
                            NumTelefone = "912222222"
                        },
                        new
                        {
                            Id = 3,
                            DataNascimento = new DateTime(1978, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Henriques82648@email.com",
                            Foto = "72648.png",
                            IdUtilizador = "0c88c53b-f18e-494e-88ff-1e9c2360f310",
                            Nome = "João Henriques",
                            NumCedulaProf = "72648",
                            NumTelefone = "963333333"
                        },
                        new
                        {
                            Id = 4,
                            DataNascimento = new DateTime(1969, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MarceloFerreira@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "2db0257a-446d-4886-b46e-3f6246610080",
                            Nome = "Marcelo Ferreira",
                            NumCedulaProf = "40603",
                            NumTelefone = "964444444"
                        },
                        new
                        {
                            Id = 5,
                            DataNascimento = new DateTime(1975, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "GabHenriques@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "773922b7-74c3-4e4c-8097-fd7468ec8315",
                            Nome = "Gabriel Henriques",
                            NumCedulaProf = "45485",
                            NumTelefone = "935555555"
                        },
                        new
                        {
                            Id = 6,
                            DataNascimento = new DateTime(1974, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Carvalho69791@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "db9792d7-d293-49b5-be8d-03ccf60d0e33",
                            Nome = "David Carvalho",
                            NumCedulaProf = "69791",
                            NumTelefone = "966666666"
                        },
                        new
                        {
                            Id = 7,
                            DataNascimento = new DateTime(1981, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Nogueira@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "e0585d26-607c-46d3-9eea-9c1c2708c7e1",
                            Nome = "Carolina Nogueira",
                            NumCedulaProf = "82666",
                            NumTelefone = "937777777"
                        },
                        new
                        {
                            Id = 8,
                            DataNascimento = new DateTime(1976, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Fernando60603@email.com",
                            Foto = "60603.png",
                            IdUtilizador = "10450067-5f19-44c7-8be1-388e8a6bdb30",
                            Nome = "João Fernando",
                            NumCedulaProf = "60603",
                            NumTelefone = "918888888"
                        });
                });

            modelBuilder.Entity("Hospital.Models.Pagamentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConsultaFK")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataEfetuado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Metodo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UtentesId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaFK");

                    b.HasIndex("UtentesId");

                    b.ToTable("Pagamentos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultaFK = 1,
                            DataEfetuado = new DateTime(2022, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Taxa Moderadora",
                            Estado = true,
                            Metodo = "MB",
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 2,
                            ConsultaFK = 1,
                            DataEfetuado = new DateTime(2022, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Raio-X",
                            Estado = true,
                            Metodo = "MB",
                            Valor = 15m
                        },
                        new
                        {
                            Id = 3,
                            ConsultaFK = 2,
                            DataEfetuado = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Taxa Moderadora",
                            Estado = true,
                            Metodo = "D",
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 4,
                            ConsultaFK = 4,
                            DataEfetuado = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Exames Laboratoriais",
                            Estado = true,
                            Metodo = "D",
                            Valor = 35.62m
                        },
                        new
                        {
                            Id = 5,
                            ConsultaFK = 3,
                            Descricao = "Taxa Moderadora",
                            Estado = false,
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 6,
                            ConsultaFK = 4,
                            Descricao = "Taxa Moderadora",
                            Estado = false,
                            Valor = 12.5m
                        },
                        new
                        {
                            Id = 7,
                            ConsultaFK = 5,
                            Descricao = "Taxa Moderadora",
                            Estado = false,
                            Valor = 12.5m
                        });
                });

            modelBuilder.Entity("Hospital.Models.Prescricoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DiagnosticoFK")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticoFK");

                    b.ToTable("Prescricoes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = new DateTime(2022, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Beclometasona quando for necessário, mínimo a cada 6 horas",
                            DiagnosticoFK = 1,
                            Estado = false
                        },
                        new
                        {
                            Id = 2,
                            Data = new DateTime(2022, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Estatinas à noite",
                            DiagnosticoFK = 2,
                            Estado = true
                        },
                        new
                        {
                            Id = 3,
                            Data = new DateTime(2022, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Formoterol duas vezes ao dia, de manhã e de noite",
                            DiagnosticoFK = 1,
                            Estado = true
                        });
                });

            modelBuilder.Entity("Hospital.Models.Utentes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUtilizador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIF")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NumTelemovel")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("NumUtente")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Utentes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataNascimento = new DateTime(1979, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "teixeira@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "29f5f36e-5f11-42a2-b0b8-de7741c7de16",
                            NIF = "270131221",
                            Nome = "Isabela Bentes Teixeira",
                            NumTelemovel = "911111111",
                            NumUtente = "111111111",
                            Sexo = "F"
                        },
                        new
                        {
                            Id = 2,
                            DataNascimento = new DateTime(1988, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "leonardo@email.com",
                            Foto = "222222222.png",
                            IdUtilizador = "a91d6e50-ec7a-442d-9278-4567dc61a0aa",
                            NIF = "244340862",
                            Nome = "Leonardo Teves Dinis",
                            NumTelemovel = "932222222",
                            NumUtente = "222222222",
                            Sexo = "M"
                        },
                        new
                        {
                            Id = 3,
                            DataNascimento = new DateTime(1968, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "belaHenriques@email.com",
                            Foto = "333333333.png",
                            IdUtilizador = "18d7e29d-408f-42d7-9a27-ecc5d034d157",
                            NIF = "290254388",
                            Nome = "Anabela Calçada Henriques Aveiro",
                            NumTelemovel = "933333333",
                            NumUtente = "333333333",
                            Sexo = "F"
                        },
                        new
                        {
                            Id = 4,
                            DataNascimento = new DateTime(1963, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joaocelso@email.com",
                            Foto = "semFoto.png",
                            IdUtilizador = "5db04ccb-3be8-452f-b381-47bd2277fdca",
                            NIF = "270131221",
                            Nome = "João Celso Oliveira",
                            NumTelemovel = "914444444",
                            NumUtente = "444444444",
                            Sexo = "M"
                        },
                        new
                        {
                            Id = 5,
                            DataNascimento = new DateTime(1990, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ineshenriques@email.com",
                            Foto = "555555555.png",
                            IdUtilizador = "db43e582-e359-421d-9192-1d3ad1a57737",
                            NIF = "270131221",
                            Nome = "Maria Inês Silva Henriques",
                            NumTelemovel = "915555555",
                            NumUtente = "555555555",
                            Sexo = "F"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a",
                            ConcurrencyStamp = "7d7dbee2-6d76-4917-bdda-c60b567ed818",
                            Name = "Administrativo",
                            NormalizedName = "ADMINISTRATIVO"
                        },
                        new
                        {
                            Id = "m",
                            ConcurrencyStamp = "c7f68ae0-fe21-46c2-b3b3-a6c2cd208776",
                            Name = "Medico",
                            NormalizedName = "MEDICO"
                        },
                        new
                        {
                            Id = "u",
                            ConcurrencyStamp = "d02bc915-5c42-40f1-b1f9-6b2314d58162",
                            Name = "Utente",
                            NormalizedName = "UTENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a370779b-8777-4d3b-a96c-7a94d217e355",
                            RoleId = "a"
                        },
                        new
                        {
                            UserId = "93b9ebd2-3f4d-4009-8d8b-3a3404f85628",
                            RoleId = "a"
                        },
                        new
                        {
                            UserId = "388c89b7-046e-414a-8212-1cced6e1aea1",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "b092ad4f-06b8-427f-bc38-cab75e79fc7d",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "0c88c53b-f18e-494e-88ff-1e9c2360f310",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "2db0257a-446d-4886-b46e-3f6246610080",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "773922b7-74c3-4e4c-8097-fd7468ec8315",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "db9792d7-d293-49b5-be8d-03ccf60d0e33",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "e0585d26-607c-46d3-9eea-9c1c2708c7e1",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "10450067-5f19-44c7-8be1-388e8a6bdb30",
                            RoleId = "m"
                        },
                        new
                        {
                            UserId = "29f5f36e-5f11-42a2-b0b8-de7741c7de16",
                            RoleId = "u"
                        },
                        new
                        {
                            UserId = "a91d6e50-ec7a-442d-9278-4567dc61a0aa",
                            RoleId = "u"
                        },
                        new
                        {
                            UserId = "18d7e29d-408f-42d7-9a27-ecc5d034d157",
                            RoleId = "u"
                        },
                        new
                        {
                            UserId = "5db04ccb-3be8-452f-b381-47bd2277fdca",
                            RoleId = "u"
                        },
                        new
                        {
                            UserId = "db43e582-e359-421d-9192-1d3ad1a57737",
                            RoleId = "u"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EspecialidadesMedicos", b =>
                {
                    b.HasOne("Hospital.Models.Especialidades", null)
                        .WithMany()
                        .HasForeignKey("ListaEspecialidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Medicos", null)
                        .WithMany()
                        .HasForeignKey("ListaMedicosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Consultas", b =>
                {
                    b.HasOne("Hospital.Models.Diagnosticos", "Diagnostico")
                        .WithMany("ListaConsultas")
                        .HasForeignKey("DiagnosticoFK");

                    b.HasOne("Hospital.Models.Medicos", "Medico")
                        .WithMany("ListaConsultas")
                        .HasForeignKey("MedicoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Utentes", "Utente")
                        .WithMany("ListaConsultas")
                        .HasForeignKey("UtenteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");

                    b.Navigation("Medico");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("Hospital.Models.Pagamentos", b =>
                {
                    b.HasOne("Hospital.Models.Consultas", "Consulta")
                        .WithMany()
                        .HasForeignKey("ConsultaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Models.Utentes", null)
                        .WithMany("ListaPagamentos")
                        .HasForeignKey("UtentesId");

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("Hospital.Models.Prescricoes", b =>
                {
                    b.HasOne("Hospital.Models.Diagnosticos", "Diagnostico")
                        .WithMany("ListaPrescricao")
                        .HasForeignKey("DiagnosticoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hospital.Data.UtilizadorApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hospital.Data.UtilizadorApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Data.UtilizadorApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hospital.Data.UtilizadorApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hospital.Models.Diagnosticos", b =>
                {
                    b.Navigation("ListaConsultas");

                    b.Navigation("ListaPrescricao");
                });

            modelBuilder.Entity("Hospital.Models.Medicos", b =>
                {
                    b.Navigation("ListaConsultas");
                });

            modelBuilder.Entity("Hospital.Models.Utentes", b =>
                {
                    b.Navigation("ListaConsultas");

                    b.Navigation("ListaPagamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
